namespace lf {
  struct narrowing_error : public std::exception
  {
    [[nodiscard]] auto what() const noexcept -> const char* { return "leaf::narrowing_error (loss of precision or data occurred)"; }
  }
}

lf: namespace = {
  narrow_cast: <T: type, U: type> (forward u: U) -> T = { return u as T; }
  narrow_strict_cast: <T: type, U: type> (copy u: U) throws -> T = {
    t = u as T;
    if t != u {

    }
    return t;
  }
}
