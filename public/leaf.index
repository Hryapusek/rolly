<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QDOCINDEX>
<INDEX url="" title="Lightweight essentials and functions library" version="" project="Leaf">
    <namespace name="" status="active" access="public" module="leaf">
        <namespace name="leaf" href="leaf-sub-leaf.html" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="12">
            <function name="Err" fullname="leaf::Err" href="leaf-sub-leaf.html#Err" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="105" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="unexpected&lt;std::decay_t&lt;E&gt;&gt;" signature="unexpected&lt;std::decay_t&lt;E&gt;&gt; Err(E &amp;&amp;e)">
                <parameter type="E &amp;&amp;" name="e" default=""/>
            </function>
            <function name="Err" fullname="leaf::Err" href="leaf-sub-leaf.html#Err-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="110" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="unexpected&lt;std::decay_t&lt;std::string&gt;&gt;" signature="unexpected&lt;std::decay_t&lt;std::string&gt;&gt; Err(int format, Args &amp;&amp;... args)">
                <parameter type="int" name="format" default=""/>
                <parameter type="Args &amp;&amp;..." name="args" default=""/>
            </function>
            <function name="eq" fullname="leaf::eq" href="leaf-sub-leaf.html#eq" status="internal" access="private" location="math.h" filepath="D:/dev/radar/leaf/include/leaf/math.h" lineno="11" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="bool" signature="bool eq(int a, int b)">
                <parameter type="int" name="a" default=""/>
                <parameter type="int" name="b" default=""/>
            </function>
            <function name="logp" fullname="leaf::logp" href="leaf-sub-leaf.html#logp" status="internal" access="private" location="math.h" filepath="D:/dev/radar/leaf/include/leaf/math.h" lineno="39" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int logp(int base, int num)">
                <parameter type="int" name="base" default=""/>
                <parameter type="int" name="num" default=""/>
            </function>
            <function name="make_non_null" fullname="leaf::make_non_null" href="leaf-sub-leaf.html#make_non_null" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="297" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto make_non_null(T &amp;&amp;t)">
                <parameter type="T &amp;&amp;" name="t" default=""/>
            </function>
            <function name="make_non_null_relaxed" fullname="leaf::make_non_null_relaxed" href="leaf-sub-leaf.html#make_non_null_relaxed" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="135" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto make_non_null_relaxed(T &amp;&amp;t)">
                <parameter type="T &amp;&amp;" name="t" default=""/>
            </function>
            <function name="make_shared_from_unique" fullname="leaf::make_shared_from_unique" href="leaf-sub-leaf.html#make_shared_from_unique" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="67" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::shared_ptr&lt;T&gt;" signature="std::shared_ptr&lt;T&gt; make_shared_from_unique(std::unique_ptr&lt;T, D&gt; &amp;&amp;ptr)">
                <parameter type="std::unique_ptr&lt;T, D&gt; &amp;&amp;" name="ptr" default=""/>
            </function>
            <function name="make_unexpected" fullname="leaf::make_unexpected" href="leaf-sub-leaf.html#make_unexpected" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="100" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="unexpected&lt;std::decay_t&lt;E&gt;&gt;" signature="unexpected&lt;std::decay_t&lt;E&gt;&gt; make_unexpected(E &amp;&amp;e)">
                <parameter type="E &amp;&amp;" name="e" default=""/>
            </function>
            <function name="narrow_cast" fullname="leaf::narrow_cast" href="leaf-sub-leaf.html#narrow_cast" status="internal" access="private" location="casts.h" filepath="D:/dev/radar/leaf/include/leaf/casts.h" lineno="9" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="T" signature="T narrow_cast(U &amp;&amp;u)">
                <parameter type="U &amp;&amp;" name="u" default=""/>
            </function>
            <function name="narrow_strict_cast" fullname="leaf::narrow_strict_cast" href="leaf-sub-leaf.html#narrow_strict_cast" status="internal" access="private" location="casts.h" filepath="D:/dev/radar/leaf/include/leaf/casts.h" lineno="23" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="T" signature="T narrow_strict_cast(U u)">
                <parameter type="U" name="u" default=""/>
            </function>
            <function name="null" fullname="leaf::null" href="leaf-sub-leaf.html#null" status="internal" access="private" location="math.h" filepath="D:/dev/radar/leaf/include/leaf/math.h" lineno="19" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="bool" signature="bool null(int num)">
                <parameter type="int" name="num" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="152" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(lhs.get() != rhs.get())" signature="decltype(lhs.get() != rhs.get()) operator!=(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="70" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator!=(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2177" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="bool" signature="bool operator!=(const expected&lt;T, E&gt; &amp;lhs, const expected&lt;U, F&gt; &amp;rhs)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const expected&lt;U, F&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2195" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="bool" signature="bool operator!=(const expected&lt;void, E&gt; &amp;lhs, const expected&lt;void, F&gt; &amp;rhs)">
                <parameter type="const expected&lt;void, E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const expected&lt;void, F&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-4" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2216" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="bool" signature="bool operator!=(const expected&lt;T, E&gt; &amp;x, const U &amp;v)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
                <parameter type="const U &amp;" name="v" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-5" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2222" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="bool" signature="bool operator!=(const U &amp;v, const expected&lt;T, E&gt; &amp;x)">
                <parameter type="const U &amp;" name="v" default=""/>
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-6" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2240" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="bool" signature="bool operator!=(const expected&lt;T, E&gt; &amp;x, const unexpected&lt;E&gt; &amp;e)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="e" default=""/>
            </function>
            <function name="operator!=" fullname="leaf::operator!=" href="leaf-sub-leaf.html#operator-not-eq-7" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2246" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="bool" signature="bool operator!=(const unexpected&lt;E&gt; &amp;e, const expected&lt;T, E&gt; &amp;x)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="e" default=""/>
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
            </function>
            <function name="operator&amp;" fullname="leaf::operator&amp;" href="leaf-sub-leaf.html#operator-and" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="68" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="Logger::Target" signature="Logger::Target operator&amp;(const Logger::Target &amp;lhs, const Logger::Target &amp;rhs)">
                <parameter type="const Logger::Target &amp;" name="lhs" default=""/>
                <parameter type="const Logger::Target &amp;" name="rhs" default=""/>
            </function>
            <function name="operator+" fullname="leaf::operator+" href="leaf-sub-leaf.html#operator-2b" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="193" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::ptrdiff_t" signature="std::ptrdiff_t operator+(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator+" fullname="leaf::operator+" href="leaf-sub-leaf.html#operator-2b-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="196" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNullRelaxed&lt;U&gt;" signature="NonNullRelaxed&lt;U&gt; operator+(const NonNullRelaxed&lt;T&gt; &amp;lhs, std::ptrdiff_t )">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="std::ptrdiff_t" name="" default=""/>
            </function>
            <function name="operator+" fullname="leaf::operator+" href="leaf-sub-leaf.html#operator-2b-2" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="291" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="std::ptrdiff_t" signature="std::ptrdiff_t operator+(const NonNull&lt;T&gt; &amp;lhs, const NonNull&lt;T&gt; &amp;rhs)">
                <parameter type="const NonNull&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNull&lt;T&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator+" fullname="leaf::operator+" href="leaf-sub-leaf.html#operator-2b-3" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="294" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="NonNull&lt;T&gt;" signature="NonNull&lt;T&gt; operator+(const NonNull&lt;T&gt; &amp;lhs, std::ptrdiff_t )">
                <parameter type="const NonNull&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="std::ptrdiff_t" name="" default=""/>
            </function>
            <function name="operator-" fullname="leaf::operator-" href="leaf-sub-leaf.html#operator-" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="187" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::ptrdiff_t" signature="std::ptrdiff_t operator-(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator-" fullname="leaf::operator-" href="leaf-sub-leaf.html#operator--1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="190" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNullRelaxed&lt;U&gt;" signature="NonNullRelaxed&lt;U&gt; operator-(const NonNullRelaxed&lt;T&gt; &amp;lhs, std::ptrdiff_t )">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="std::ptrdiff_t" name="" default=""/>
            </function>
            <function name="operator-" fullname="leaf::operator-" href="leaf-sub-leaf.html#operator--2" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="285" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="std::ptrdiff_t" signature="std::ptrdiff_t operator-(const NonNull&lt;T&gt; &amp;lhs, const NonNull&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNull&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNull&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator-" fullname="leaf::operator-" href="leaf-sub-leaf.html#operator--3" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="288" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="NonNull&lt;T&gt;" signature="NonNull&lt;T&gt; operator-(const NonNull&lt;T&gt; &amp;lhs, std::ptrdiff_t )">
                <parameter type="const NonNull&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="std::ptrdiff_t" name="" default=""/>
            </function>
            <function name="operator&lt;" fullname="leaf::operator&lt;" href="leaf-sub-leaf.html#operator-lt" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="159" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(std::less&lt;&gt;{}(lhs.get(), rhs.get()))" signature="decltype(std::less&lt;&gt;{}(lhs.get(), rhs.get())) operator&lt;(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&lt;" fullname="leaf::operator&lt;" href="leaf-sub-leaf.html#operator-lt-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="76" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator&lt;(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&lt;&lt;" fullname="leaf::operator&lt;&lt;" href="leaf-sub-leaf.html#operator-lt-lt" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="119" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::basic_ostream&lt;E, T&gt; &amp;" signature="std::basic_ostream&lt;E, T&gt; &amp; operator&lt;&lt;(std::basic_ostream&lt;E, T&gt; &amp;os, const source_location &amp;loc)">
                <parameter type="std::basic_ostream&lt;E, T&gt; &amp;" name="os" default=""/>
                <parameter type="const source_location &amp;" name="loc" default=""/>
            </function>
            <function name="operator&lt;&lt;" fullname="leaf::operator&lt;&lt;" href="leaf-sub-leaf.html#operator-lt-lt-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="138" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="std::ostream &amp;" signature="std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const NonNullRelaxed&lt;T&gt; &amp;ptr)">
                <parameter type="std::ostream &amp;" name="os" default=""/>
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="ptr" default=""/>
            </function>
            <function name="operator&lt;=" fullname="leaf::operator&lt;=" href="leaf-sub-leaf.html#operator-lt-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="166" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(std::less_equal&lt;&gt;{}(lhs.get(), rhs.get()))" signature="decltype(std::less_equal&lt;&gt;{}(lhs.get(), rhs.get())) operator&lt;=(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&lt;=" fullname="leaf::operator&lt;=" href="leaf-sub-leaf.html#operator-lt-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="82" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator&lt;=(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="145" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(lhs.get() == rhs.get())" signature="decltype(lhs.get() == rhs.get()) operator==(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="64" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator==(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2168" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="bool" signature="bool operator==(const expected&lt;T, E&gt; &amp;lhs, const expected&lt;U, F&gt; &amp;rhs)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const expected&lt;U, F&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2186" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="bool" signature="bool operator==(const expected&lt;void, E&gt; &amp;lhs, const expected&lt;void, F&gt; &amp;rhs)">
                <parameter type="const expected&lt;void, E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const expected&lt;void, F&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-4" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2204" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="bool" signature="bool operator==(const expected&lt;T, E&gt; &amp;x, const U &amp;v)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
                <parameter type="const U &amp;" name="v" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-5" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2210" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="bool" signature="bool operator==(const U &amp;v, const expected&lt;T, E&gt; &amp;x)">
                <parameter type="const U &amp;" name="v" default=""/>
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-6" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2228" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="bool" signature="bool operator==(const expected&lt;T, E&gt; &amp;x, const unexpected&lt;E&gt; &amp;e)">
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="e" default=""/>
            </function>
            <function name="operator==" fullname="leaf::operator==" href="leaf-sub-leaf.html#operator-eq-eq-7" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2234" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="bool" signature="bool operator==(const unexpected&lt;E&gt; &amp;e, const expected&lt;T, E&gt; &amp;x)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="e" default=""/>
                <parameter type="const expected&lt;T, E&gt; &amp;" name="x" default=""/>
            </function>
            <function name="operator&gt;" fullname="leaf::operator&gt;" href="leaf-sub-leaf.html#operator-gt" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="173" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(std::greater&lt;&gt;{}(lhs.get(), rhs.get()))" signature="decltype(std::greater&lt;&gt;{}(lhs.get(), rhs.get())) operator&gt;(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&gt;" fullname="leaf::operator&gt;" href="leaf-sub-leaf.html#operator-gt-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="88" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator&gt;(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&gt;=" fullname="leaf::operator&gt;=" href="leaf-sub-leaf.html#operator-gt-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="180" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(std::greater_equal&lt;&gt;{}(lhs.get(), rhs.get()))" signature="decltype(std::greater_equal&lt;&gt;{}(lhs.get(), rhs.get())) operator&gt;=(const NonNullRelaxed&lt;T&gt; &amp;lhs, const NonNullRelaxed&lt;U&gt; &amp;rhs)">
                <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="lhs" default=""/>
                <parameter type="const NonNullRelaxed&lt;U&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&gt;=" fullname="leaf::operator&gt;=" href="leaf-sub-leaf.html#operator-gt-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="94" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="bool" signature="bool operator&gt;=(const unexpected&lt;E&gt; &amp;lhs, const unexpected&lt;E&gt; &amp;rhs)">
                <parameter type="const unexpected&lt;E&gt; &amp;" name="lhs" default=""/>
                <parameter type="const unexpected&lt;E&gt; &amp;" name="rhs" default=""/>
            </function>
            <function name="operator|" fullname="leaf::operator|" href="leaf-sub-leaf.html#operator-7c" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="64" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="Logger::Target" signature="Logger::Target operator|(const Logger::Target &amp;lhs, const Logger::Target &amp;rhs)">
                <parameter type="const Logger::Target &amp;" name="lhs" default=""/>
                <parameter type="const Logger::Target &amp;" name="rhs" default=""/>
            </function>
            <function name="to_degrees" fullname="leaf::to_degrees" href="leaf-sub-leaf.html#to_degrees" status="internal" access="private" location="math.h" filepath="D:/dev/radar/leaf/include/leaf/math.h" lineno="32" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int to_degrees(int rad)">
                <parameter type="int" name="rad" default=""/>
            </function>
            <function name="to_radians" fullname="leaf::to_radians" href="leaf-sub-leaf.html#to_radians" status="internal" access="private" location="math.h" filepath="D:/dev/radar/leaf/include/leaf/math.h" lineno="25" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int to_radians(int deg)">
                <parameter type="int" name="deg" default=""/>
            </function>
            <function name="unreachable" fullname="leaf::unreachable" href="leaf-sub-leaf.html#unreachable" status="internal" access="private" location="definitions.h" filepath="D:/dev/radar/leaf/include/leaf/global/definitions.h" lineno="29" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void unreachable()"/>
            <class name="Logger" fullname="leaf::Logger" href="leaf-logger.html" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="24">
                <function name="Logger" fullname="leaf::Logger::Logger" href="leaf-logger.html#Logger" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="49" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="Logger(int logger_name, int log_pattern, Level level, Target target, int log_file_name, int max_file_size_mb, int max_file_count)">
                    <parameter type="int" name="logger_name" default=""/>
                    <parameter type="int" name="log_pattern" default=""/>
                    <parameter type="Level" name="level" default=""/>
                    <parameter type="Target" name="target" default=""/>
                    <parameter type="int" name="log_file_name" default=""/>
                    <parameter type="int" name="max_file_size_mb" default=""/>
                    <parameter type="int" name="max_file_count" default=""/>
                </function>
                <function name="~Logger" fullname="leaf::Logger::~Logger" href="leaf-logger.html#dtor.Logger" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="59" meta="destructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="~Logger()"/>
                <struct name="DefaultPatterns" fullname="leaf::Logger::DefaultPatterns" href="leaf-logger-defaultpatterns.html" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="27">
                    <variable name="SimpleWithThreadInfo" fullname="leaf::Logger::DefaultPatterns::SimpleWithThreadInfo" href="leaf-logger-defaultpatterns.html#SimpleWithThreadInfo-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="29" type="const char *const" static="true"/>
                </struct>
                <enum name="Level" fullname="leaf::Logger::Level" href="leaf-logger.html#Level-enum" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="32" scoped="true">
                    <value name="Trace" value="0"/>
                    <value name="Debug" value="1"/>
                    <value name="Info" value="2"/>
                    <value name="Warn" value="3"/>
                    <value name="Error" value="4"/>
                    <value name="Fatal" value="5"/>
                </enum>
                <enum name="Target" fullname="leaf::Logger::Target" href="leaf-logger.html#Target-enum" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="42" scoped="true">
                    <value name="Stdout" value="1 &lt;&lt; 0"/>
                    <value name="File" value="1 &lt;&lt; 1"/>
                    <value name="All" value="Stdout | File"/>
                </enum>
                <variable name="initialized" fullname="leaf::Logger::initialized" href="leaf-logger.html#initialized-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="61" type="bool" static="false"/>
            </class>
            <class name="LoggerBuilder" fullname="leaf::LoggerBuilder" href="leaf-loggerbuilder.html" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="72">
                <function name="LoggerBuilder" fullname="leaf::LoggerBuilder::LoggerBuilder" href="leaf-loggerbuilder.html#LoggerBuilder" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="75" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="LoggerBuilder()"/>
                <function name="build" fullname="leaf::LoggerBuilder::build" href="leaf-loggerbuilder.html#build" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="85" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="expected&lt;shared_ptr&lt;Logger&gt;, string&gt;" signature="expected&lt;shared_ptr&lt;Logger&gt;, string&gt; build() const"/>
                <function name="with_level" fullname="leaf::LoggerBuilder::with_level" href="leaf-loggerbuilder.html#with_level" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="79" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_level(Logger::Level level)">
                    <parameter type="Logger::Level" name="level" default=""/>
                </function>
                <function name="with_log_file_name" fullname="leaf::LoggerBuilder::with_log_file_name" href="leaf-loggerbuilder.html#with_log_file_name" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="81" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_log_file_name(int log_file_name)">
                    <parameter type="int" name="log_file_name" default=""/>
                </function>
                <function name="with_max_file_count" fullname="leaf::LoggerBuilder::with_max_file_count" href="leaf-loggerbuilder.html#with_max_file_count" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="83" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_max_file_count(types::usize max_file_count)">
                    <parameter type="types::usize" name="max_file_count" default=""/>
                </function>
                <function name="with_max_file_size_mb" fullname="leaf::LoggerBuilder::with_max_file_size_mb" href="leaf-loggerbuilder.html#with_max_file_size_mb" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="82" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_max_file_size_mb(types::f32 max_file_size_mb)">
                    <parameter type="types::f32" name="max_file_size_mb" default=""/>
                </function>
                <function name="with_name" fullname="leaf::LoggerBuilder::with_name" href="leaf-loggerbuilder.html#with_name" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="77" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_name(int name)">
                    <parameter type="int" name="name" default=""/>
                </function>
                <function name="with_pattern" fullname="leaf::LoggerBuilder::with_pattern" href="leaf-loggerbuilder.html#with_pattern" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="78" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_pattern(int pattern)">
                    <parameter type="int" name="pattern" default=""/>
                </function>
                <function name="with_target" fullname="leaf::LoggerBuilder::with_target" href="leaf-loggerbuilder.html#with_target" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="80" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="LoggerBuilder &amp;" signature="LoggerBuilder &amp; with_target(Logger::Target target)">
                    <parameter type="Logger::Target" name="target" default=""/>
                </function>
                <variable name="level" fullname="leaf::LoggerBuilder::level" href="leaf-loggerbuilder.html#level-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="90" type="Logger::Level" static="false"/>
                <variable name="log_file_name" fullname="leaf::LoggerBuilder::log_file_name" href="leaf-loggerbuilder.html#log_file_name-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="92" type="int" static="false"/>
                <variable name="max_file_count" fullname="leaf::LoggerBuilder::max_file_count" href="leaf-loggerbuilder.html#max_file_count-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="94" type="int" static="false"/>
                <variable name="max_file_size_mb" fullname="leaf::LoggerBuilder::max_file_size_mb" href="leaf-loggerbuilder.html#max_file_size_mb-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="93" type="int" static="false"/>
                <variable name="name" fullname="leaf::LoggerBuilder::name" href="leaf-loggerbuilder.html#name-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="88" type="string" static="false"/>
                <variable name="pattern" fullname="leaf::LoggerBuilder::pattern" href="leaf-loggerbuilder.html#pattern-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="89" type="string" static="false"/>
                <variable name="target" fullname="leaf::LoggerBuilder::target" href="leaf-loggerbuilder.html#target-var" status="internal" access="private" location="logger.h" filepath="D:/dev/radar/leaf/include/leaf/logger.h" lineno="91" type="Logger::Target" static="false"/>
            </class>
            <class name="NonNull" fullname="leaf::NonNull" href="leaf-nonnull.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="236" bases="leaf::NonNullRelaxed">
                <function name="NonNull" fullname="leaf::NonNull::NonNull" href="leaf-nonnull.html#NonNull" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="260" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="NonNull(const NonNull&lt;T&gt; &amp;other)">
                    <parameter type="const NonNull&lt;T&gt; &amp;" name="other" default=""/>
                </function>
                <function name="NonNull" fullname="leaf::NonNull::NonNull" href="leaf-nonnull.html#NonNull-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="271" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="NonNull(std::nullptr_t )">
                    <parameter type="std::nullptr_t" name="" default=""/>
                </function>
                <function name="operator++" fullname="leaf::NonNull::operator++" href="leaf-nonnull.html#operator-2b-2b" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="273" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator++()"/>
                <function name="operator++" fullname="leaf::NonNull::operator++" href="leaf-nonnull.html#operator-2b-2b-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="274" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator++(int )">
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="operator+=" fullname="leaf::NonNull::operator+=" href="leaf-nonnull.html#operator-2b-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="277" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator+=(std::ptrdiff_t )">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
                <function name="operator--" fullname="leaf::NonNull::operator--" href="leaf-nonnull.html#operator--" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="275" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator--()"/>
                <function name="operator--" fullname="leaf::NonNull::operator--" href="leaf-nonnull.html#operator---1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="276" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator--(int )">
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="operator-=" fullname="leaf::NonNull::operator-=" href="leaf-nonnull.html#operator--eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="278" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator-=(std::ptrdiff_t )">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
                <function name="operator=" fullname="leaf::NonNull::operator=" href="leaf-nonnull.html#operator-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="261" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator=(const NonNull&lt;T&gt; &amp;other)">
                    <parameter type="const NonNull&lt;T&gt; &amp;" name="other" default=""/>
                </function>
                <function name="operator=" fullname="leaf::NonNull::operator=" href="leaf-nonnull.html#operator-eq-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="265" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator=(const NonNullRelaxed&lt;T&gt; &amp;other)">
                    <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="other" default=""/>
                </function>
                <function name="operator=" fullname="leaf::NonNull::operator=" href="leaf-nonnull.html#operator-eq-2" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="272" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="NonNull&lt;T&gt; &amp;" signature="NonNull&lt;T&gt; &amp; operator=(std::nullptr_t )">
                    <parameter type="std::nullptr_t" name="" default=""/>
                </function>
                <function name="operator[]" fullname="leaf::NonNull::operator[]" href="leaf-nonnull.html#operator-5b-5d" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="279" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="void" signature="void operator[](std::ptrdiff_t ) const">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
            </class>
            <class name="NonNullRelaxed" fullname="leaf::NonNullRelaxed" href="leaf-nonnullrelaxed.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="84">
                <function name="NonNullRelaxed" fullname="leaf::NonNullRelaxed::NonNullRelaxed" href="leaf-nonnullrelaxed.html#NonNullRelaxed" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="109" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="NonNullRelaxed(std::nullptr_t )">
                    <parameter type="std::nullptr_t" name="" default=""/>
                </function>
                <function name="get" fullname="leaf::NonNullRelaxed::get" href="leaf-nonnullrelaxed.html#get" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="120" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int get() const"/>
                <function name="operator T" fullname="leaf::NonNullRelaxed::operator T" href="leaf-nonnullrelaxed.html#operator-T" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="126" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="T" signature="T operator T() const"/>
                <function name="operator*" fullname="leaf::NonNullRelaxed::operator*" href="leaf-nonnullrelaxed.html#operator-2a" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="128" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="decltype(auto)" signature="decltype(auto) operator*() const"/>
                <function name="operator++" fullname="leaf::NonNullRelaxed::operator++" href="leaf-nonnullrelaxed.html#operator-2b-2b" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="112" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator++()"/>
                <function name="operator++" fullname="leaf::NonNullRelaxed::operator++" href="leaf-nonnullrelaxed.html#operator-2b-2b-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="113" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator++(int )">
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="operator+=" fullname="leaf::NonNullRelaxed::operator+=" href="leaf-nonnullrelaxed.html#operator-2b-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="116" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator+=(std::ptrdiff_t )">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
                <function name="operator--" fullname="leaf::NonNullRelaxed::operator--" href="leaf-nonnullrelaxed.html#operator--" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="114" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator--()"/>
                <function name="operator--" fullname="leaf::NonNullRelaxed::operator--" href="leaf-nonnullrelaxed.html#operator---1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="115" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator--(int )">
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="operator-=" fullname="leaf::NonNullRelaxed::operator-=" href="leaf-nonnullrelaxed.html#operator--eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="117" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator-=(std::ptrdiff_t )">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
                <function name="operator-&gt;" fullname="leaf::NonNullRelaxed::operator-&gt;" href="leaf-nonnullrelaxed.html#operator--gt" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="127" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="decltype(auto)" signature="decltype(auto) operator-&gt;() const"/>
                <function name="operator=" fullname="leaf::NonNullRelaxed::operator=" href="leaf-nonnullrelaxed.html#operator-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="110" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator=(const NonNullRelaxed&lt;T&gt; &amp;other)">
                    <parameter type="const NonNullRelaxed&lt;T&gt; &amp;" name="other" default=""/>
                </function>
                <function name="operator=" fullname="leaf::NonNullRelaxed::operator=" href="leaf-nonnullrelaxed.html#operator-eq-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="111" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="NonNullRelaxed&lt;T&gt; &amp;" signature="NonNullRelaxed&lt;T&gt; &amp; operator=(std::nullptr_t )">
                    <parameter type="std::nullptr_t" name="" default=""/>
                </function>
                <function name="operator[]" fullname="leaf::NonNullRelaxed::operator[]" href="leaf-nonnullrelaxed.html#operator-5b-5d" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="118" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="void" signature="void operator[](std::ptrdiff_t ) const">
                    <parameter type="std::ptrdiff_t" name="" default=""/>
                </function>
                <variable name="m_ptr" fullname="leaf::NonNullRelaxed::m_ptr" href="leaf-nonnullrelaxed.html#m_ptr-var" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="131" type="T" static="false"/>
            </class>
            <struct name="NonNullRelaxedHash" fullname="leaf::NonNullRelaxedHash" href="leaf-nonnullrelaxedhash.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="208">
                <function name="NonNullRelaxedHash" fullname="leaf::NonNullRelaxedHash::NonNullRelaxedHash" href="leaf-nonnullrelaxedhash.html#NonNullRelaxedHash" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="210" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="NonNullRelaxedHash()"/>
                <function name="NonNullRelaxedHash" fullname="leaf::NonNullRelaxedHash::NonNullRelaxedHash" href="leaf-nonnullrelaxedhash.html#NonNullRelaxedHash-1" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="211" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="NonNullRelaxedHash(const NonNullRelaxedHash&lt;T, U&gt; &amp;)">
                    <parameter type="const NonNullRelaxedHash&lt;T, U&gt; &amp;" name="" default=""/>
                </function>
                <function name="operator=" fullname="leaf::NonNullRelaxedHash::operator=" href="leaf-nonnullrelaxedhash.html#operator-eq" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="212" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto operator=(const NonNullRelaxedHash&lt;T, U&gt; &amp;)">
                    <parameter type="const NonNullRelaxedHash&lt;T, U&gt; &amp;" name="" default=""/>
                </function>
            </struct>
            <class name="bad_expected_access" fullname="leaf::bad_expected_access" href="leaf-bad-expected-access.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1163" bases="std::exception">
                <function name="bad_expected_access" fullname="leaf::bad_expected_access::bad_expected_access" href="leaf-bad-expected-access.html#bad_expected_access" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1166" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="bad_expected_access(E e)">
                    <parameter type="E" name="e" default=""/>
                </function>
                <function name="error" fullname="leaf::bad_expected_access::error" href="leaf-bad-expected-access.html#error" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1174" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="const E &amp;" signature="const E &amp; error() const &amp;"/>
                <function name="error" fullname="leaf::bad_expected_access::error" href="leaf-bad-expected-access.html#error-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1175" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="E &amp;" signature="E &amp; error() &amp;"/>
                <function name="what" fullname="leaf::bad_expected_access::what" href="leaf-bad-expected-access.html#what" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1169" meta="plain" virtual="virtual" const="true" static="false" final="false" override="true" type="const char *" signature="const char * what() const override"/>
                <variable name="m_val" fullname="leaf::bad_expected_access::m_val" href="leaf-bad-expected-access.html#m_val-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1180" type="E" static="false"/>
            </class>
            <namespace name="conversion" fullname="leaf::conversion" href="leaf-conversion-sub-leaf.html" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="5">
                <function name="as_str" fullname="leaf::conversion::as_str" href="leaf-conversion-sub-leaf.html#as_str" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="24" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="string" signature="string as_str(T )">
                    <parameter type="T" name="" default=""/>
                </function>
                <function name="from_str" fullname="leaf::conversion::from_str" href="leaf-conversion-sub-leaf.html#from_str" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="14" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="T" signature="T from_str(int )">
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="into" fullname="leaf::conversion::into" href="leaf-conversion-sub-leaf.html#into" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="9" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="To" signature="To into(From )">
                    <parameter type="From" name="" default=""/>
                </function>
                <function name="try_as_str" fullname="leaf::conversion::try_as_str" href="leaf-conversion-sub-leaf.html#try_as_str" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="29" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="string" signature="string try_as_str(T )">
                    <parameter type="T" name="" default=""/>
                </function>
                <function name="try_from_str" fullname="leaf::conversion::try_from_str" href="leaf-conversion-sub-leaf.html#try_from_str" status="internal" access="private" location="conversion.h" filepath="D:/dev/radar/leaf/include/leaf/conversion.h" lineno="19" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int try_from_str(int )">
                    <parameter type="int" name="" default=""/>
                </function>
            </namespace>
            <namespace name="detail" fullname="leaf::detail" href="leaf-detail-sub-leaf.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="21">
                <function name="and_then_impl" fullname="leaf::detail::and_then_impl" href="leaf-detail-sub-leaf.html#and_then_impl" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1999" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto and_then_impl(Exp &amp;&amp;exp, F &amp;&amp;f)">
                    <parameter type="Exp &amp;&amp;" name="exp" default=""/>
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="expected_map_impl" fullname="leaf::detail::expected_map_impl" href="leaf-detail-sub-leaf.html#expected_map_impl" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2024" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto expected_map_impl(Exp &amp;&amp;exp, F &amp;&amp;f)">
                    <parameter type="Exp &amp;&amp;" name="exp" default=""/>
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="invoke" fullname="leaf::detail::invoke" href="leaf-detail-sub-leaf.html#invoke" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="162" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="decltype(std::mem_fn(f)(std::forward&lt;Args&gt;(args)...))" signature="decltype(std::mem_fn(f)(std::forward&lt;Args&gt;(args)...)) invoke(Fn &amp;&amp;f, Args &amp;&amp;... args)">
                    <parameter type="Fn &amp;&amp;" name="f" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="map_error_impl" fullname="leaf::detail::map_error_impl" href="leaf-detail-sub-leaf.html#map_error_impl" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2083" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto map_error_impl(Exp &amp;&amp;exp, F &amp;&amp;f)">
                    <parameter type="Exp &amp;&amp;" name="exp" default=""/>
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="or_else_impl" fullname="leaf::detail::or_else_impl" href="leaf-detail-sub-leaf.html#or_else_impl" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="2144" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="auto" signature="auto or_else_impl(Exp &amp;&amp;exp, F &amp;&amp;f)">
                    <parameter type="Exp &amp;&amp;" name="exp" default=""/>
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="throw_exception" fullname="leaf::detail::throw_exception" href="leaf-detail-sub-leaf.html#throw_exception" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="124" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void throw_exception(E &amp;&amp;e)">
                    <parameter type="E &amp;&amp;" name="e" default=""/>
                </function>
                <struct name="conjunction" fullname="leaf::detail::conjunction" href="leaf-detail-conjunction.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="143" bases="std"/>
                <struct name="default_constructor_tag" fullname="leaf::detail::default_constructor_tag" href="leaf-detail-default-constructor-tag.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1124">
                    <function name="default_constructor_tag" fullname="leaf::detail::default_constructor_tag::default_constructor_tag" href="leaf-detail-default-constructor-tag.html#default_constructor_tag" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1126" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="default_constructor_tag()"/>
                </struct>
                <struct name="expected_copy_assign_base" fullname="leaf::detail::expected_copy_assign_base" href="leaf-detail-expected-copy-assign-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="966" bases="leaf::detail::expected_move_base"/>
                <struct name="expected_copy_base" fullname="leaf::detail::expected_copy_base" href="leaf-detail-expected-copy-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="893" bases="leaf::detail::expected_operations_base"/>
                <struct name="expected_default_ctor_base" fullname="leaf::detail::expected_default_ctor_base" href="leaf-detail-expected-default-ctor-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1135">
                    <function name="expected_default_ctor_base" fullname="leaf::detail::expected_default_ctor_base::expected_default_ctor_base" href="leaf-detail-expected-default-ctor-base.html#expected_default_ctor_base" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1137" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="expected_default_ctor_base()"/>
                    <function name="expected_default_ctor_base" fullname="leaf::detail::expected_default_ctor_base::expected_default_ctor_base" href="leaf-detail-expected-default-ctor-base.html#expected_default_ctor_base-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1138" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="expected_default_ctor_base(const expected_default_ctor_base&lt;T, E, Enable&gt; &amp;)">
                        <parameter type="const expected_default_ctor_base&lt;T, E, Enable&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="expected_default_ctor_base" fullname="leaf::detail::expected_default_ctor_base::expected_default_ctor_base" href="leaf-detail-expected-default-ctor-base.html#expected_default_ctor_base-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1140" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="expected_default_ctor_base(expected_default_ctor_base&lt;T, E, Enable&gt; &amp;&amp;)">
                        <parameter type="expected_default_ctor_base&lt;T, E, Enable&gt; &amp;&amp;" name="" default=""/>
                    </function>
                    <function name="expected_default_ctor_base" fullname="leaf::detail::expected_default_ctor_base::expected_default_ctor_base" href="leaf-detail-expected-default-ctor-base.html#expected_default_ctor_base-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1144" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="" signature="expected_default_ctor_base(default_constructor_tag )">
                        <parameter type="default_constructor_tag" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_default_ctor_base::operator=" href="leaf-detail-expected-default-ctor-base.html#operator-eq" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1141" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="expected_default_ctor_base&lt;T, E, Enable&gt; &amp;" signature="expected_default_ctor_base&lt;T, E, Enable&gt; &amp; operator=(const expected_default_ctor_base&lt;T, E, Enable&gt; &amp;)">
                        <parameter type="const expected_default_ctor_base&lt;T, E, Enable&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_default_ctor_base::operator=" href="leaf-detail-expected-default-ctor-base.html#operator-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1142" meta="move-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="expected_default_ctor_base&lt;T, E, Enable&gt; &amp;" signature="expected_default_ctor_base&lt;T, E, Enable&gt; &amp; operator=(expected_default_ctor_base&lt;T, E, Enable&gt; &amp;&amp;)">
                        <parameter type="expected_default_ctor_base&lt;T, E, Enable&gt; &amp;&amp;" name="" default=""/>
                    </function>
                </struct>
                <struct name="expected_delete_assign_base" fullname="leaf::detail::expected_delete_assign_base" href="leaf-detail-expected-delete-assign-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1083">
                    <function name="expected_delete_assign_base" fullname="leaf::detail::expected_delete_assign_base::expected_delete_assign_base" href="leaf-detail-expected-delete-assign-base.html#expected_delete_assign_base" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1085" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="expected_delete_assign_base()"/>
                    <function name="expected_delete_assign_base" fullname="leaf::detail::expected_delete_assign_base::expected_delete_assign_base" href="leaf-detail-expected-delete-assign-base.html#expected_delete_assign_base-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1086" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="expected_delete_assign_base(const expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;)">
                        <parameter type="const expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="expected_delete_assign_base" fullname="leaf::detail::expected_delete_assign_base::expected_delete_assign_base" href="leaf-detail-expected-delete-assign-base.html#expected_delete_assign_base-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1087" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="expected_delete_assign_base(expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;)">
                        <parameter type="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_delete_assign_base::operator=" href="leaf-detail-expected-delete-assign-base.html#operator-eq" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1088" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" signature="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp; operator=(const expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;)">
                        <parameter type="const expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_delete_assign_base::operator=" href="leaf-detail-expected-delete-assign-base.html#operator-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1089" meta="move-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" signature="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp; operator=(expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;)">
                        <parameter type="expected_delete_assign_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;" name="" default=""/>
                    </function>
                </struct>
                <struct name="expected_delete_ctor_base" fullname="leaf::detail::expected_delete_ctor_base" href="leaf-detail-expected-delete-ctor-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1032">
                    <function name="expected_delete_ctor_base" fullname="leaf::detail::expected_delete_ctor_base::expected_delete_ctor_base" href="leaf-detail-expected-delete-ctor-base.html#expected_delete_ctor_base" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1034" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="expected_delete_ctor_base()"/>
                    <function name="expected_delete_ctor_base" fullname="leaf::detail::expected_delete_ctor_base::expected_delete_ctor_base" href="leaf-detail-expected-delete-ctor-base.html#expected_delete_ctor_base-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1035" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="expected_delete_ctor_base(const expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;)">
                        <parameter type="const expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="expected_delete_ctor_base" fullname="leaf::detail::expected_delete_ctor_base::expected_delete_ctor_base" href="leaf-detail-expected-delete-ctor-base.html#expected_delete_ctor_base-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1036" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="expected_delete_ctor_base(expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;)">
                        <parameter type="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_delete_ctor_base::operator=" href="leaf-detail-expected-delete-ctor-base.html#operator-eq" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1037" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" signature="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp; operator=(const expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;)">
                        <parameter type="const expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" name="" default=""/>
                    </function>
                    <function name="operator=" fullname="leaf::detail::expected_delete_ctor_base::operator=" href="leaf-detail-expected-delete-ctor-base.html#operator-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1038" meta="move-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;" signature="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp; operator=(expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;)">
                        <parameter type="expected_delete_ctor_base&lt;T, E, EnableCopy, EnableMove&gt; &amp;&amp;" name="" default=""/>
                    </function>
                </struct>
                <struct name="expected_move_assign_base" fullname="leaf::detail::expected_move_assign_base" href="leaf-detail-expected-move-assign-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="998" bases="leaf::detail::expected_copy_assign_base"/>
                <struct name="expected_move_base" fullname="leaf::detail::expected_move_base" href="leaf-detail-expected-move-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="927" bases="leaf::detail::expected_copy_base"/>
                <struct name="expected_operations_base" fullname="leaf::detail::expected_operations_base" href="leaf-detail-expected-operations-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="631" bases="leaf::detail::expected_storage_base">
                    <function name="assign" fullname="leaf::detail::expected_operations_base::assign" href="leaf-detail-expected-operations-base.html#assign" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="660" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void assign(const expected_operations_base&lt;T, E&gt; &amp;rhs)">
                        <parameter type="const expected_operations_base&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    </function>
                    <function name="assign" fullname="leaf::detail::expected_operations_base::assign" href="leaf-detail-expected-operations-base.html#assign-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="729" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void assign(expected_operations_base&lt;T, E&gt; &amp;&amp;rhs)">
                        <parameter type="expected_operations_base&lt;T, E&gt; &amp;&amp;" name="rhs" default=""/>
                    </function>
                    <function name="assign_common" fullname="leaf::detail::expected_operations_base::assign_common" href="leaf-detail-expected-operations-base.html#assign_common" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="769" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void assign_common(Rhs &amp;&amp;rhs)">
                        <parameter type="Rhs &amp;&amp;" name="rhs" default=""/>
                    </function>
                    <function name="construct" fullname="leaf::detail::expected_operations_base::construct" href="leaf-detail-expected-operations-base.html#construct" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="636" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void construct(Args &amp;&amp;... args)">
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="construct_error" fullname="leaf::detail::expected_operations_base::construct_error" href="leaf-detail-expected-operations-base.html#construct_error" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="650" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void construct_error(Args &amp;&amp;... args)">
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="construct_with" fullname="leaf::detail::expected_operations_base::construct_with" href="leaf-detail-expected-operations-base.html#construct_with" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="643" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void construct_with(Rhs &amp;&amp;rhs)">
                        <parameter type="Rhs &amp;&amp;" name="rhs" default=""/>
                    </function>
                    <function name="destroy_val" fullname="leaf::detail::expected_operations_base::destroy_val" href="leaf-detail-expected-operations-base.html#destroy_val" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="814" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void destroy_val()"/>
                    <function name="get" fullname="leaf::detail::expected_operations_base::get" href="leaf-detail-expected-operations-base.html#get" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="794" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="T &amp;" signature="T &amp; get() &amp;"/>
                    <function name="get" fullname="leaf::detail::expected_operations_base::get" href="leaf-detail-expected-operations-base.html#get-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="795" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="const T &amp;" signature="const T &amp; get() const &amp;"/>
                    <function name="geterr" fullname="leaf::detail::expected_operations_base::geterr" href="leaf-detail-expected-operations-base.html#geterr" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="799" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="unexpected&lt;E&gt; &amp;" signature="unexpected&lt;E&gt; &amp; geterr() &amp;"/>
                    <function name="geterr" fullname="leaf::detail::expected_operations_base::geterr" href="leaf-detail-expected-operations-base.html#geterr-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="804" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="const unexpected&lt;E&gt; &amp;" signature="const unexpected&lt;E&gt; &amp; geterr() const &amp;"/>
                    <function name="has_value" fullname="leaf::detail::expected_operations_base::has_value" href="leaf-detail-expected-operations-base.html#has_value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="792" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool has_value() const"/>
                </struct>
                <struct name="expected_storage_base" fullname="leaf::detail::expected_storage_base" href="leaf-detail-expected-storage-base.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="328">
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="330" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="expected_storage_base()"/>
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="333" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="expected_storage_base(no_init_t )">
                        <parameter type="no_init_t" name="" default=""/>
                    </function>
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="339" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="expected_storage_base(in_place_t , Args &amp;&amp;... args)">
                        <parameter type="in_place_t" name="" default=""/>
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="345" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="" signature="expected_storage_base(in_place_t , std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)">
                        <parameter type="in_place_t" name="" default=""/>
                        <parameter type="std::initializer_list&lt;U&gt;" name="il" default=""/>
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base-4" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="352" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="" signature="expected_storage_base(unexpect_t , Args &amp;&amp;... args)">
                        <parameter type="unexpect_t" name="" default=""/>
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="expected_storage_base" fullname="leaf::detail::expected_storage_base::expected_storage_base" href="leaf-detail-expected-storage-base.html#expected_storage_base-5" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="358" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="" signature="expected_storage_base(unexpect_t , std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)">
                        <parameter type="unexpect_t" name="" default=""/>
                        <parameter type="std::initializer_list&lt;U&gt;" name="il" default=""/>
                        <parameter type="Args &amp;&amp;..." name="args" default=""/>
                    </function>
                    <function name="~expected_storage_base" fullname="leaf::detail::expected_storage_base::~expected_storage_base" href="leaf-detail-expected-storage-base.html#dtor.expected_storage_base" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="363" meta="destructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="~expected_storage_base()"/>
                    <union name="(anonymous union at D:/dev/radar/leaf/include/leaf/global/result.h:375:7)" fullname="leaf::detail::expected_storage_base::(anonymous union at D:/dev/radar/leaf/include/leaf/global/result.h:375:7)" href="leaf-detail-expected-storage-base-anonymous-union-at-d-dev-radar-leaf-include-leaf-global-result-h-375-7.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="375">
                        <variable name="m_no_init" fullname="leaf::detail::expected_storage_base::(anonymous union at D:/dev/radar/leaf/include/leaf/global/result.h:375:7)::m_no_init" href="leaf-detail-expected-storage-base-anonymous-union-at-d-dev-radar-leaf-include-leaf-global-result-h-375-7.html#m_no_init-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="379" type="char" static="false"/>
                        <variable name="m_unexpect" fullname="leaf::detail::expected_storage_base::(anonymous union at D:/dev/radar/leaf/include/leaf/global/result.h:375:7)::m_unexpect" href="leaf-detail-expected-storage-base-anonymous-union-at-d-dev-radar-leaf-include-leaf-global-result-h-375-7.html#m_unexpect-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="378" type="unexpected&lt;E&gt;" static="false"/>
                        <variable name="m_val" fullname="leaf::detail::expected_storage_base::(anonymous union at D:/dev/radar/leaf/include/leaf/global/result.h:375:7)::m_val" href="leaf-detail-expected-storage-base-anonymous-union-at-d-dev-radar-leaf-include-leaf-global-result-h-375-7.html#m_val-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="377" type="T" static="false"/>
                    </union>
                    <variable name="m_has_val" fullname="leaf::detail::expected_storage_base::m_has_val" href="leaf-detail-expected-storage-base.html#m_has_val-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="382" type="bool" static="false"/>
                </struct>
                <struct name="is_comparable_to_nullptr" fullname="leaf::detail::is_comparable_to_nullptr" href="leaf-detail-is-comparable-to-nullptr.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="27" bases="std"/>
                <struct name="is_expected_impl" fullname="leaf::detail::is_expected_impl" href="leaf-detail-is-expected-impl.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="267" bases="std"/>
                <struct name="is_nothrow_swappable" fullname="leaf::detail::is_nothrow_swappable" href="leaf-detail-is-nothrow-swappable.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="257" bases="std::integral_constant"/>
                <struct name="is_swappable" fullname="leaf::detail::is_swappable" href="leaf-detail-is-swappable.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="239" bases="std::integral_constant"/>
                <struct name="no_init_t" fullname="leaf::detail::no_init_t" href="leaf-detail-no-init-t.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="316"/>
                <namespace name="swap_adl_tests" fullname="leaf::detail::swap_adl_tests" href="leaf-detail-swap-adl-tests-sub-leaf.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="199">
                    <function name="can_swap" fullname="leaf::detail::swap_adl_tests::can_swap" href="leaf-detail-swap-adl-tests-sub-leaf.html#can_swap" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="213" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::false_type" signature="std::false_type can_swap(... )">
                        <parameter type="..." name="" default=""/>
                    </function>
                    <function name="can_swap" fullname="leaf::detail::swap_adl_tests::can_swap" href="leaf-detail-swap-adl-tests-sub-leaf.html#can_swap-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="216" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="std::true_type" signature="std::true_type can_swap(int )">
                        <parameter type="int" name="" default=""/>
                    </function>
                    <function name="swap" fullname="leaf::detail::swap_adl_tests::swap" href="leaf-detail-swap-adl-tests-sub-leaf.html#swap" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="206" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="tag" signature="tag swap(T &amp;, T &amp;)">
                        <parameter type="T &amp;" name="" default=""/>
                        <parameter type="T &amp;" name="" default=""/>
                    </function>
                    <function name="swap" fullname="leaf::detail::swap_adl_tests::swap" href="leaf-detail-swap-adl-tests-sub-leaf.html#swap-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="208" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="tag" signature="tag swap(T (&amp;)[N] a, T (&amp;)[N] b)">
                        <parameter type="T (&amp;)[N]" name="a" default="N"/>
                        <parameter type="T (&amp;)[N]" name="b" default="N"/>
                    </function>
                    <function name="uses_std" fullname="leaf::detail::swap_adl_tests::uses_std" href="leaf-detail-swap-adl-tests-sub-leaf.html#uses_std" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="220" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="std::false_type" signature="std::false_type uses_std(... )">
                        <parameter type="..." name="" default=""/>
                    </function>
                    <function name="uses_std" fullname="leaf::detail::swap_adl_tests::uses_std" href="leaf-detail-swap-adl-tests-sub-leaf.html#uses_std-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="222" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="std::is_same&lt;decltype(swap(std::declval&lt;T &amp;&gt;(), std::declval&lt;U &amp;&gt;())), tag&gt;" signature="std::is_same&lt;decltype(swap(std::declval&lt;T &amp;&gt;(), std::declval&lt;U &amp;&gt;())), tag&gt; uses_std(int )">
                        <parameter type="int" name="" default=""/>
                    </function>
                    <struct name="is_adl_swap_noexcept" fullname="leaf::detail::swap_adl_tests::is_adl_swap_noexcept" href="leaf-detail-swap-adl-tests-is-adl-swap-noexcept.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="234" bases="std::integral_constant"/>
                    <struct name="is_std_swap_noexcept" fullname="leaf::detail::swap_adl_tests::is_std_swap_noexcept" href="leaf-detail-swap-adl-tests-is-std-swap-noexcept.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="225" bases="std::integral_constant"/>
                    <struct name="tag" fullname="leaf::detail::swap_adl_tests::tag" href="leaf-detail-swap-adl-tests-tag.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="203"/>
                </namespace>
                <alias name="conditional_t" fullname="leaf::detail::conditional_t" href="leaf-detail-sub-leaf.html#conditional_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="139" aliasedtype="typename std::conditional&lt;B, T, F&gt;::type"/>
                <alias name="decay_t" fullname="leaf::detail::decay_t" href="leaf-detail-sub-leaf.html#decay_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="135" aliasedtype="typename std::decay&lt;T&gt;::type"/>
                <alias name="err_t" fullname="leaf::detail::err_t" href="leaf-detail-sub-leaf.html#err_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1991" aliasedtype="typename detail::decay_t&lt;Exp&gt;::error_type"/>
                <alias name="exp_t" fullname="leaf::detail::exp_t" href="leaf-detail-sub-leaf.html#exp_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1989" aliasedtype="typename detail::decay_t&lt;Exp&gt;::value_type"/>
                <alias name="expected_enable_forward_value" fullname="leaf::detail::expected_enable_forward_value" href="leaf-detail-sub-leaf.html#expected_enable_forward_value-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="276" aliasedtype="detail::enable_if_t&lt; std::is_constructible&lt;T, U &amp;&amp;&gt;::value &amp;&amp; !std::is_same&lt;detail::decay_t&lt;U&gt;, in_place_t&gt;::value &amp;&amp; !std::is_same&lt;expected&lt;T, E&gt;, detail::decay_t&lt;U&gt;&gt;::value &amp;&amp; !std::is_same&lt;unexpected&lt;E&gt;, detail::decay_t&lt;U&gt;&gt;::value&gt;"/>
                <alias name="expected_enable_from_other" fullname="leaf::detail::expected_enable_from_other" href="leaf-detail-sub-leaf.html#expected_enable_from_other-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="283" aliasedtype="detail::enable_if_t&lt; std::is_constructible&lt;T, UR&gt;::value &amp;&amp; std::is_constructible&lt;E, GR&gt;::value &amp;&amp; !std::is_constructible&lt;T, expected&lt;U, G&gt; &amp;&gt;::value &amp;&amp; !std::is_constructible&lt;T, expected&lt;U, G&gt; &amp;&amp;&gt;::value &amp;&amp; !std::is_constructible&lt;T, const expected&lt;U, G&gt; &amp;&gt;::value &amp;&amp; !std::is_constructible&lt;T, const expected&lt;U, G&gt; &amp;&amp;&gt;::value &amp;&amp; !std::is_convertible&lt;expected&lt;U, G&gt; &amp;, T&gt;::value &amp;&amp; !std::is_convertible&lt;expected&lt;U, G&gt; &amp;&amp;, T&gt;::value &amp;&amp; !std::is_convertible&lt;const expected&lt;U, G&gt; &amp;, T&gt;::value &amp;&amp; !std::is_convertible&lt;const expected&lt;U, G&gt; &amp;&amp;, T&gt;::value&gt;"/>
                <alias name="invoke_result" fullname="leaf::detail::invoke_result" href="leaf-detail-sub-leaf.html#invoke_result-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="193" aliasedtype="invoke_result_impl&lt;F, void, Us...&gt;"/>
                <alias name="invoke_result_t" fullname="leaf::detail::invoke_result_t" href="leaf-detail-sub-leaf.html#invoke_result_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="196" aliasedtype="typename invoke_result&lt;F, Us...&gt;::type"/>
                <alias name="is_copy_assignable_or_void" fullname="leaf::detail::is_copy_assignable_or_void" href="leaf-detail-sub-leaf.html#is_copy_assignable_or_void-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="307" aliasedtype="is_void_or&lt;T, std::is_copy_assignable&lt;T&gt;&gt;"/>
                <alias name="is_copy_constructible_or_void" fullname="leaf::detail::is_copy_constructible_or_void" href="leaf-detail-sub-leaf.html#is_copy_constructible_or_void-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="299" aliasedtype="is_void_or&lt;T, std::is_copy_constructible&lt;T&gt;&gt;"/>
                <alias name="is_expected" fullname="leaf::detail::is_expected" href="leaf-detail-sub-leaf.html#is_expected-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="273" aliasedtype="is_expected_impl&lt;decay_t&lt;T&gt;&gt;"/>
                <alias name="is_move_assignable_or_void" fullname="leaf::detail::is_move_assignable_or_void" href="leaf-detail-sub-leaf.html#is_move_assignable_or_void-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="310" aliasedtype="is_void_or&lt;T, std::is_move_assignable&lt;T&gt;&gt;"/>
                <alias name="is_move_constructible_or_void" fullname="leaf::detail::is_move_constructible_or_void" href="leaf-detail-sub-leaf.html#is_move_constructible_or_void-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="303" aliasedtype="is_void_or&lt;T, std::is_move_constructible&lt;T&gt;&gt;"/>
                <alias name="is_void_or" fullname="leaf::detail::is_void_or" href="leaf-detail-sub-leaf.html#is_void_or-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="296" aliasedtype="conditional_t&lt;std::is_void&lt;T&gt;::value, std::true_type, U&gt;"/>
                <alias name="remove_const_t" fullname="leaf::detail::remove_const_t" href="leaf-detail-sub-leaf.html#remove_const_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="131" aliasedtype="typename std::remove_const&lt;T&gt;::type"/>
                <alias name="remove_reference_t" fullname="leaf::detail::remove_reference_t" href="leaf-detail-sub-leaf.html#remove_reference_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="133" aliasedtype="typename std::remove_reference&lt;T&gt;::type"/>
                <alias name="ret_t" fullname="leaf::detail::ret_t" href="leaf-detail-sub-leaf.html#ret_t-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1993" aliasedtype="expected&lt;Ret, err_t&lt;Exp&gt;&gt;"/>
                <variable name="no_init" fullname="leaf::detail::no_init" href="leaf-detail-sub-leaf.html#no_init-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="318" type="const no_init_t" static="false"/>
            </namespace>
            <namespace name="details" fullname="leaf::details" href="leaf-details-sub-leaf.html" status="internal" access="private" location="assert.h" filepath="D:/dev/radar/leaf/include/leaf/assert.h" lineno="39">
                <function name="terminate" fullname="leaf::details::terminate" href="leaf-details-sub-leaf.html#terminate" status="internal" access="private" location="assert.h" filepath="D:/dev/radar/leaf/include/leaf/assert.h" lineno="41" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void terminate()"/>
            </namespace>
            <class name="expected" fullname="leaf::expected" href="leaf-expected.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1191" bases="leaf::detail::expected_default_ctor_base,leaf::detail::expected_delete_assign_base,leaf::detail::expected_delete_ctor_base,leaf::detail::expected_move_assign_base">
                <function name="and_then" fullname="leaf::expected::and_then" href="leaf-expected.html#and_then" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1243" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="auto" signature="auto and_then(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="and_then" fullname="leaf::expected::and_then" href="leaf-expected.html#and_then-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1255" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="auto" signature="auto and_then(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="err" fullname="leaf::expected::err" href="leaf-expected.html#err" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1223" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="unexpected&lt;E&gt; &amp;" signature="unexpected&lt;E&gt; &amp; err()"/>
                <function name="err" fullname="leaf::expected::err" href="leaf-expected.html#err-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1232" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const unexpected&lt;E&gt; &amp;" signature="const unexpected&lt;E&gt; &amp; err() const"/>
                <function name="error" fullname="leaf::expected::error" href="leaf-expected.html#error" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1943" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="const E &amp;" signature="const E &amp; error() const &amp;"/>
                <function name="error" fullname="leaf::expected::error" href="leaf-expected.html#error-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1949" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="E &amp;" signature="E &amp; error() &amp;"/>
                <function name="errptr" fullname="leaf::expected::errptr" href="leaf-expected.html#errptr" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1209" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="unexpected&lt;E&gt; *" signature="unexpected&lt;E&gt; * errptr()"/>
                <function name="errptr" fullname="leaf::expected::errptr" href="leaf-expected.html#errptr-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1211" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const unexpected&lt;E&gt; *" signature="const unexpected&lt;E&gt; * errptr() const"/>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1386" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="expected()"/>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1387" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="expected(const expected&lt;T, E&gt; &amp;rhs)">
                    <parameter type="const expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1388" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="expected(expected&lt;T, E&gt; &amp;&amp;rhs)">
                    <parameter type="expected&lt;T, E&gt; &amp;&amp;" name="rhs" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1395" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="" signature="expected(in_place_t , Args &amp;&amp;... args)">
                    <parameter type="in_place_t" name="" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-4" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1402" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="" signature="expected(in_place_t , std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)">
                    <parameter type="in_place_t" name="" default=""/>
                    <parameter type="std::initializer_list&lt;U&gt;" name="il" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-5" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1411" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="5" type="" signature="expected(const unexpected&lt;G&gt; &amp;e)">
                    <parameter type="const unexpected&lt;G&gt; &amp;" name="e" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-6" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1428" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="6" type="" signature="expected(unexpected&lt;G&gt; &amp;&amp;e)">
                    <parameter type="unexpected&lt;G&gt; &amp;&amp;" name="e" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-7" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1445" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="7" type="" signature="expected(unexpect_t , Args &amp;&amp;... args)">
                    <parameter type="unexpect_t" name="" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-8" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1452" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="8" type="" signature="expected(unexpect_t , std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)">
                    <parameter type="unexpect_t" name="" default=""/>
                    <parameter type="std::initializer_list&lt;U&gt;" name="il" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-9" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1463" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="9" type="" signature="expected(const expected&lt;U, G&gt; &amp;rhs)">
                    <parameter type="const expected&lt;U, G&gt; &amp;" name="rhs" default=""/>
                </function>
                <function name="expected" fullname="leaf::expected::expected" href="leaf-expected.html#expected-10" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1500" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="10" type="" signature="expected(expected&lt;U, G&gt; &amp;&amp;rhs)">
                    <parameter type="expected&lt;U, G&gt; &amp;&amp;" name="rhs" default=""/>
                </function>
                <function name="has_value" fullname="leaf::expected::has_value" href="leaf-expected.html#has_value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1904" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool has_value() const"/>
                <function name="map" fullname="leaf::expected::map" href="leaf-expected.html#map" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1267" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="auto" signature="auto map(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="map" fullname="leaf::expected::map" href="leaf-expected.html#map-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1279" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="auto" signature="auto map(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="map_error" fullname="leaf::expected::map_error" href="leaf-expected.html#map_error" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1315" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="auto" signature="auto map_error(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="map_error" fullname="leaf::expected::map_error" href="leaf-expected.html#map_error-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1327" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="auto" signature="auto map_error(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="operator bool" fullname="leaf::expected::operator bool" href="leaf-expected.html#operator-bool" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1905" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="bool" signature="bool operator bool() const"/>
                <function name="operator*" fullname="leaf::expected::operator*" href="leaf-expected.html#operator-2a" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1874" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="const U &amp;" signature="const U &amp; operator*() const &amp;"/>
                <function name="operator*" fullname="leaf::expected::operator*" href="leaf-expected.html#operator-2a-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1882" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="U &amp;" signature="U &amp; operator*() &amp;"/>
                <function name="operator-&gt;" fullname="leaf::expected::operator-&gt;" href="leaf-expected.html#operator--gt" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1860" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const T *" signature="const T * operator-&gt;() const"/>
                <function name="operator-&gt;" fullname="leaf::expected::operator-&gt;" href="leaf-expected.html#operator--gt-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1866" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="T *" signature="T * operator-&gt;()"/>
                <function name="operator=" fullname="leaf::expected::operator=" href="leaf-expected.html#operator-eq" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1389" meta="copy-assign" virtual="non" const="false" static="false" final="false" override="false" type="expected&lt;T, E&gt; &amp;" signature="expected&lt;T, E&gt; &amp; operator=(const expected&lt;T, E&gt; &amp;rhs)">
                    <parameter type="const expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                </function>
                <function name="operator=" fullname="leaf::expected::operator=" href="leaf-expected.html#operator-eq-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1390" meta="move-assign" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="expected&lt;T, E&gt; &amp;" signature="expected&lt;T, E&gt; &amp; operator=(expected&lt;T, E&gt; &amp;&amp;rhs)">
                    <parameter type="expected&lt;T, E&gt; &amp;&amp;" name="rhs" default=""/>
                </function>
                <function name="or_else" fullname="leaf::expected::or_else" href="leaf-expected.html#or_else" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1363" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="expected&lt;T, E&gt;" signature="expected&lt;T, E&gt; or_else(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="or_else" fullname="leaf::expected::or_else" href="leaf-expected.html#or_else-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1375" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="expected&lt;T, E&gt;" signature="expected&lt;T, E&gt; or_else(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="swap" fullname="leaf::expected::swap" href="leaf-expected.html#swap" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1835" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="detail::enable_if_t&lt;detail::is_swappable&lt;OT&gt;::value &amp;&amp; detail::is_swappable&lt;OE&gt;::value &amp;&amp; (std::is_nothrow_move_constructible&lt;OT&gt;::value || std::is_nothrow_move_constructible&lt;OE&gt;::value)&gt;" signature="detail::enable_if_t&lt;detail::is_swappable&lt;OT&gt;::value &amp;&amp; detail::is_swappable&lt;OE&gt;::value &amp;&amp; (std::is_nothrow_move_constructible&lt;OT&gt;::value || std::is_nothrow_move_constructible&lt;OE&gt;::value)&gt; swap(expected&lt;T, E&gt; &amp;rhs)">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                </function>
                <function name="swap_where_both_have_value" fullname="leaf::expected::swap_where_both_have_value" href="leaf-expected.html#swap_where_both_have_value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1752" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void swap_where_both_have_value(expected&lt;T, E&gt; &amp;, int )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="" default=""/>
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="swap_where_both_have_value" fullname="leaf::expected::swap_where_both_have_value" href="leaf-expected.html#swap_where_both_have_value-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1757" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void swap_where_both_have_value(expected&lt;T, E&gt; &amp;rhs, t_is_not_void )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="t_is_not_void" name="" default=""/>
                </function>
                <function name="swap_where_only_one_has_value" fullname="leaf::expected::swap_where_only_one_has_value" href="leaf-expected.html#swap_where_only_one_has_value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1763" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void swap_where_only_one_has_value(expected&lt;T, E&gt; &amp;rhs, int )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="int" name="" default=""/>
                </function>
                <function name="swap_where_only_one_has_value" fullname="leaf::expected::swap_where_only_one_has_value" href="leaf-expected.html#swap_where_only_one_has_value-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1771" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void swap_where_only_one_has_value(expected&lt;T, E&gt; &amp;rhs, t_is_not_void )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="t_is_not_void" name="" default=""/>
                </function>
                <function name="swap_where_only_one_has_value_and_t_is_not_void" fullname="leaf::expected::swap_where_only_one_has_value_and_t_is_not_void" href="leaf-expected.html#swap_where_only_one_has_value_and_t_is_not_void" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1778" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void swap_where_only_one_has_value_and_t_is_not_void(expected&lt;T, E&gt; &amp;rhs, t_is_nothrow_move_constructible , e_is_nothrow_move_constructible )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="t_is_nothrow_move_constructible" name="" default=""/>
                    <parameter type="e_is_nothrow_move_constructible" name="" default=""/>
                </function>
                <function name="swap_where_only_one_has_value_and_t_is_not_void" fullname="leaf::expected::swap_where_only_one_has_value_and_t_is_not_void" href="leaf-expected.html#swap_where_only_one_has_value_and_t_is_not_void-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1790" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="void" signature="void swap_where_only_one_has_value_and_t_is_not_void(expected&lt;T, E&gt; &amp;rhs, t_is_nothrow_move_constructible , move_constructing_e_can_throw )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="t_is_nothrow_move_constructible" name="" default=""/>
                    <parameter type="move_constructing_e_can_throw" name="" default=""/>
                </function>
                <function name="swap_where_only_one_has_value_and_t_is_not_void" fullname="leaf::expected::swap_where_only_one_has_value_and_t_is_not_void" href="leaf-expected.html#swap_where_only_one_has_value_and_t_is_not_void-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1810" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="void" signature="void swap_where_only_one_has_value_and_t_is_not_void(expected&lt;T, E&gt; &amp;rhs, move_constructing_t_can_throw , e_is_nothrow_move_constructible )">
                    <parameter type="expected&lt;T, E&gt; &amp;" name="rhs" default=""/>
                    <parameter type="move_constructing_t_can_throw" name="" default=""/>
                    <parameter type="e_is_nothrow_move_constructible" name="" default=""/>
                </function>
                <function name="transform" fullname="leaf::expected::transform" href="leaf-expected.html#transform" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1291" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="auto" signature="auto transform(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="transform" fullname="leaf::expected::transform" href="leaf-expected.html#transform-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1303" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="auto" signature="auto transform(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="transform_error" fullname="leaf::expected::transform_error" href="leaf-expected.html#transform_error" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1339" meta="plain" virtual="non" const="false" static="false" final="false" override="false" refness="1" type="auto" signature="auto transform_error(F &amp;&amp;f) &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="transform_error" fullname="leaf::expected::transform_error" href="leaf-expected.html#transform_error-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1351" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="auto" signature="auto transform_error(F &amp;&amp;f) const &amp;">
                    <parameter type="F &amp;&amp;" name="f" default=""/>
                </function>
                <function name="val" fullname="leaf::expected::val" href="leaf-expected.html#val" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1218" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="U &amp;" signature="U &amp; val()"/>
                <function name="val" fullname="leaf::expected::val" href="leaf-expected.html#val-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1227" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const U &amp;" signature="const U &amp; val() const"/>
                <function name="valptr" fullname="leaf::expected::valptr" href="leaf-expected.html#valptr" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1207" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="T *" signature="T * valptr()"/>
                <function name="valptr" fullname="leaf::expected::valptr" href="leaf-expected.html#valptr-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1208" meta="plain" virtual="non" const="true" static="false" final="false" override="false" overload="true" overload-number="1" type="const T *" signature="const T * valptr() const"/>
                <function name="value" fullname="leaf::expected::value" href="leaf-expected.html#value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1909" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="const U &amp;" signature="const U &amp; value() const &amp;"/>
                <function name="value" fullname="leaf::expected::value" href="leaf-expected.html#value-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1918" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="U &amp;" signature="U &amp; value() &amp;"/>
                <function name="value_or" fullname="leaf::expected::value_or" href="leaf-expected.html#value_or" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1968" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="T" signature="T value_or(U &amp;&amp;v) const &amp;">
                    <parameter type="U &amp;&amp;" name="v" default=""/>
                </function>
                <function name="value_or" fullname="leaf::expected::value_or" href="leaf-expected.html#value_or-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1977" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="2" type="T" signature="T value_or(U &amp;&amp;v) &amp;&amp;">
                    <parameter type="U &amp;&amp;" name="v" default=""/>
                </function>
                <typedef name="error_type" fullname="leaf::expected::error_type" href="leaf-expected.html#error_type-typedef" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1239"/>
                <typedef name="unexpected_type" fullname="leaf::expected::unexpected_type" href="leaf-expected.html#unexpected_type-typedef" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1240"/>
                <typedef name="value_type" fullname="leaf::expected::value_type" href="leaf-expected.html#value_type-typedef" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1238"/>
                <alias name="ctor_base" fullname="leaf::expected::ctor_base" href="leaf-expected.html#ctor_base-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1235" aliasedtype="detail::expected_default_ctor_base&lt;T, E&gt;"/>
                <alias name="e_is_nothrow_move_constructible" fullname="leaf::expected::e_is_nothrow_move_constructible" href="leaf-expected.html#e_is_nothrow_move_constructible-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1749" aliasedtype="std::true_type"/>
                <alias name="impl_base" fullname="leaf::expected::impl_base" href="leaf-expected.html#impl_base-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1234" aliasedtype="detail::expected_move_assign_base&lt;T, E&gt;"/>
                <alias name="move_constructing_e_can_throw" fullname="leaf::expected::move_constructing_e_can_throw" href="leaf-expected.html#move_constructing_e_can_throw-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1750" aliasedtype="std::false_type"/>
                <alias name="move_constructing_t_can_throw" fullname="leaf::expected::move_constructing_t_can_throw" href="leaf-expected.html#move_constructing_t_can_throw-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1748" aliasedtype="std::false_type"/>
                <alias name="t_is_not_void" fullname="leaf::expected::t_is_not_void" href="leaf-expected.html#t_is_not_void-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1746" aliasedtype="std::false_type"/>
                <alias name="t_is_nothrow_move_constructible" fullname="leaf::expected::t_is_nothrow_move_constructible" href="leaf-expected.html#t_is_nothrow_move_constructible-alias" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="1747" aliasedtype="std::true_type"/>
            </class>
            <struct name="in_place_t" fullname="leaf::in_place_t" href="leaf-in-place-t.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="18">
                <function name="in_place_t" fullname="leaf::in_place_t::in_place_t" href="leaf-in-place-t.html#in_place_t" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="20" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="in_place_t()"/>
            </struct>
            <namespace name="literals" fullname="leaf::literals" href="leaf-literals-sub-leaf.html" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="31">
                <function name="operator&quot;&quot;_i16" fullname="leaf::literals::operator&quot;&quot;_i16" href="leaf-literals-sub-leaf.html#operator-22-22_i16" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="38" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="i16" signature="i16 operator&quot;&quot;_i16(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_i32" fullname="leaf::literals::operator&quot;&quot;_i32" href="leaf-literals-sub-leaf.html#operator-22-22_i32" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="39" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="i32" signature="i32 operator&quot;&quot;_i32(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_i64" fullname="leaf::literals::operator&quot;&quot;_i64" href="leaf-literals-sub-leaf.html#operator-22-22_i64" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="40" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="i64" signature="i64 operator&quot;&quot;_i64(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_i8" fullname="leaf::literals::operator&quot;&quot;_i8" href="leaf-literals-sub-leaf.html#operator-22-22_i8" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="37" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="i8" signature="i8 operator&quot;&quot;_i8(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_iptr" fullname="leaf::literals::operator&quot;&quot;_iptr" href="leaf-literals-sub-leaf.html#operator-22-22_iptr" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="42" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="isize" signature="isize operator&quot;&quot;_iptr(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_ptrdiff" fullname="leaf::literals::operator&quot;&quot;_ptrdiff" href="leaf-literals-sub-leaf.html#operator-22-22_ptrdiff" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="44" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="ptrdiff_t" signature="ptrdiff_t operator&quot;&quot;_ptrdiff(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_sz" fullname="leaf::literals::operator&quot;&quot;_sz" href="leaf-literals-sub-leaf.html#operator-22-22_sz" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="41" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="usize" signature="usize operator&quot;&quot;_sz(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_u16" fullname="leaf::literals::operator&quot;&quot;_u16" href="leaf-literals-sub-leaf.html#operator-22-22_u16" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="34" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="u16" signature="u16 operator&quot;&quot;_u16(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_u32" fullname="leaf::literals::operator&quot;&quot;_u32" href="leaf-literals-sub-leaf.html#operator-22-22_u32" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="35" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="u32" signature="u32 operator&quot;&quot;_u32(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_u64" fullname="leaf::literals::operator&quot;&quot;_u64" href="leaf-literals-sub-leaf.html#operator-22-22_u64" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="36" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="u64" signature="u64 operator&quot;&quot;_u64(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_u8" fullname="leaf::literals::operator&quot;&quot;_u8" href="leaf-literals-sub-leaf.html#operator-22-22_u8" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="33" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="u8" signature="u8 operator&quot;&quot;_u8(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
                <function name="operator&quot;&quot;_uptr" fullname="leaf::literals::operator&quot;&quot;_uptr" href="leaf-literals-sub-leaf.html#operator-22-22_uptr" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="43" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="usize" signature="usize operator&quot;&quot;_uptr(unsigned long long value)">
                    <parameter type="unsigned long long" name="value" default=""/>
                </function>
            </namespace>
            <namespace name="log" fullname="leaf::log" href="leaf-log-sub-leaf.html" status="internal" access="private" location="log.h" filepath="D:/dev/radar/leaf/include/leaf/global/log.h" lineno="10">
                <struct name="LogFileConfiguration" fullname="leaf::log::LogFileConfiguration" href="leaf-log-logfileconfiguration.html" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="21">
                    <function name="initialize" fullname="leaf::log::LogFileConfiguration::initialize" href="leaf-log-logfileconfiguration.html#initialize" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="36" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="bool" signature="bool initialize()"/>
                    <enum name="LogLevel" fullname="leaf::log::LogFileConfiguration::LogLevel" href="leaf-log-logfileconfiguration.html#LogLevel-enum" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="24" scoped="true">
                        <value name="Trace" value="0"/>
                        <value name="Debug" value="1"/>
                        <value name="Info" value="2"/>
                        <value name="Warn" value="3"/>
                        <value name="Error" value="4"/>
                        <value name="Critical" value="5"/>
                    </enum>
                    <variable name="filename" fullname="leaf::log::LogFileConfiguration::filename" href="leaf-log-logfileconfiguration.html#filename-var" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="38" type="string" static="false"/>
                    <variable name="level" fullname="leaf::log::LogFileConfiguration::level" href="leaf-log-logfileconfiguration.html#level-var" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="41" type="LogLevel" static="false"/>
                    <variable name="max_files" fullname="leaf::log::LogFileConfiguration::max_files" href="leaf-log-logfileconfiguration.html#max_files-var" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="40" type="usize" static="false"/>
                    <variable name="max_size" fullname="leaf::log::LogFileConfiguration::max_size" href="leaf-log-logfileconfiguration.html#max_size-var" status="internal" access="private" location="logconfig.h" filepath="D:/dev/radar/leaf/include/leaf/global/logconfig.h" lineno="39" type="usize" static="false"/>
                </struct>
                <variable name="clean" fullname="leaf::log::clean" href="leaf-log-sub-leaf.html#clean-var" status="internal" access="private" location="log.h" filepath="D:/dev/radar/leaf/include/leaf/global/log.h" lineno="23" type="const auto" static="false"/>
                <variable name="line_clear" fullname="leaf::log::line_clear" href="leaf-log-sub-leaf.html#line_clear-var" status="internal" access="private" location="log.h" filepath="D:/dev/radar/leaf/include/leaf/global/log.h" lineno="21" type="const auto" static="false"/>
                <variable name="line_up" fullname="leaf::log::line_up" href="leaf-log-sub-leaf.html#line_up-var" status="internal" access="private" location="log.h" filepath="D:/dev/radar/leaf/include/leaf/global/log.h" lineno="20" type="const auto" static="false"/>
                <variable name="rewrite" fullname="leaf::log::rewrite" href="leaf-log-sub-leaf.html#rewrite-var" status="internal" access="private" location="log.h" filepath="D:/dev/radar/leaf/include/leaf/global/log.h" lineno="22" type="const auto" static="false"/>
            </namespace>
            <class name="monostate" fullname="leaf::monostate" href="leaf-monostate.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="16"/>
            <struct name="narrowing_error" fullname="leaf::narrowing_error" href="leaf-narrowing-error.html" status="internal" access="private" location="casts.h" filepath="D:/dev/radar/leaf/include/leaf/casts.h" lineno="14" bases="std::exception">
                <function name="what" fullname="leaf::narrowing_error::what" href="leaf-narrowing-error.html#what" status="internal" access="private" location="casts.h" filepath="D:/dev/radar/leaf/include/leaf/casts.h" lineno="16" meta="plain" virtual="virtual" const="true" static="false" final="false" override="true" type="const char *" signature="const char * what() const override"/>
            </struct>
            <namespace name="os" fullname="leaf::os" href="leaf-os-sub-leaf.html" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="11">
                <function name="architecture" fullname="leaf::os::architecture" href="leaf-os-sub-leaf.html#architecture" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="135" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int architecture()"/>
                <function name="compiler" fullname="leaf::os::compiler" href="leaf-os-sub-leaf.html#compiler" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="186" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int compiler()"/>
                <function name="endianness" fullname="leaf::os::endianness" href="leaf-os-sub-leaf.html#endianness" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="251" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int endianness()"/>
                <function name="language" fullname="leaf::os::language" href="leaf-os-sub-leaf.html#language" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="262" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int language()"/>
                <function name="path_separator" fullname="leaf::os::path_separator" href="leaf-os-sub-leaf.html#path_separator" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="287" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int path_separator()"/>
                <function name="swap_endian" fullname="leaf::os::swap_endian" href="leaf-os-sub-leaf.html#swap_endian" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="295" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="T" signature="T swap_endian(T u)">
                    <parameter type="T" name="u" default=""/>
                </function>
                <function name="system" fullname="leaf::os::system" href="leaf-os-sub-leaf.html#system" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="108" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int system()"/>
                <enum name="arch" fullname="leaf::os::arch" href="leaf-os-sub-leaf.html#arch-enum" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="26" scoped="true">
                    <value name="x86_32" value="0"/>
                    <value name="x86_64" value="1"/>
                    <value name="alpha" value="2"/>
                    <value name="arm" value="3"/>
                    <value name="bfin" value="4"/>
                    <value name="convex" value="5"/>
                    <value name="e2k" value="6"/>
                    <value name="ia64" value="7"/>
                    <value name="loongarch" value="8"/>
                    <value name="m68k" value="9"/>
                    <value name="mips" value="10"/>
                    <value name="hppa" value="11"/>
                    <value name="powerpc" value="12"/>
                    <value name="cuda" value="13"/>
                    <value name="pyramid" value="14"/>
                    <value name="riscv" value="15"/>
                    <value name="rs6000" value="16"/>
                    <value name="sparc" value="17"/>
                    <value name="superh" value="18"/>
                    <value name="s370" value="19"/>
                    <value name="s390" value="20"/>
                    <value name="sysz" value="21"/>
                    <value name="unknown" value="22"/>
                </enum>
                <enum name="compiler" fullname="leaf::os::compiler" href="leaf-os-sub-leaf.html#compiler-enum" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="53" scoped="true">
                    <value name="borland" value="0"/>
                    <value name="clang" value="1"/>
                    <value name="comeau" value="2"/>
                    <value name="compaq" value="3"/>
                    <value name="diab" value="4"/>
                    <value name="digitalmars" value="5"/>
                    <value name="dignussystem" value="6"/>
                    <value name="edg" value="7"/>
                    <value name="pathscale" value="8"/>
                    <value name="gcc" value="9"/>
                    <value name="greenhills" value="10"/>
                    <value name="hpa" value="11"/>
                    <value name="iar" value="12"/>
                    <value name="ibm" value="13"/>
                    <value name="intel" value="14"/>
                    <value name="kai" value="15"/>
                    <value name="llvm" value="16"/>
                    <value name="metaware" value="17"/>
                    <value name="codewarrior" value="18"/>
                    <value name="microtec" value="19"/>
                    <value name="mpw" value="20"/>
                    <value name="nvcc" value="21"/>
                    <value name="palm" value="22"/>
                    <value name="portlandgroup" value="23"/>
                    <value name="mipspro" value="24"/>
                    <value name="oracle" value="25"/>
                    <value name="tendra" value="26"/>
                    <value name="msvc" value="27"/>
                    <value name="watcom" value="28"/>
                    <value name="unknown" value="29"/>
                </enum>
                <enum name="endianness" fullname="leaf::os::endianness" href="leaf-os-sub-leaf.html#endianness-enum" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="87" scoped="true">
                    <value name="little" value="0"/>
                    <value name="big" value="1"/>
                    <value name="unknown" value="2"/>
                </enum>
                <enum name="language" fullname="leaf::os::language" href="leaf-os-sub-leaf.html#language-enum" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="94" scoped="true">
                    <value name="c" value="0"/>
                    <value name="cxxpre98" value="1"/>
                    <value name="cxx98" value="2"/>
                    <value name="cxx03" value="3"/>
                    <value name="cxx11" value="4"/>
                    <value name="cxx14" value="5"/>
                    <value name="cxx17" value="6"/>
                    <value name="cxx20" value="7"/>
                    <value name="cxx23" value="8"/>
                    <value name="unknown" value="9"/>
                </enum>
                <enum name="operating_system" fullname="leaf::os::operating_system" href="leaf-os-sub-leaf.html#operating_system-enum" status="internal" access="private" location="os.h" filepath="D:/dev/radar/leaf/include/leaf/os.h" lineno="12" scoped="true">
                    <value name="windows" value="0"/>
                    <value name="gnu_linux" value="1"/>
                    <value name="darwin" value="2"/>
                    <value name="android" value="3"/>
                    <value name="cygwin" value="4"/>
                    <value name="freebsd" value="5"/>
                    <value name="dragonfly" value="6"/>
                    <value name="netbsd" value="7"/>
                    <value name="openbsd" value="8"/>
                    <value name="unknown" value="9"/>
                </enum>
            </namespace>
            <namespace name="pattern" fullname="leaf::pattern" href="leaf-pattern-sub-leaf.html" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="7">
                <class name="IObservable" fullname="leaf::pattern::IObservable" href="leaf-pattern-iobservable.html" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="10">
                    <function name="notify" fullname="leaf::pattern::IObservable::notify" href="leaf-pattern-iobservable.html#notify" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="15" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void notify(T... args)">
                        <parameter type="T..." name="args" default=""/>
                    </function>
                    <function name="operator+=" fullname="leaf::pattern::IObservable::operator+=" href="leaf-pattern-iobservable.html#operator-2b-eq" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="17" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void operator+=(int *observer)">
                        <parameter type="int *" name="observer" default=""/>
                    </function>
                    <function name="operator-=" fullname="leaf::pattern::IObservable::operator-=" href="leaf-pattern-iobservable.html#operator--eq" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="18" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void operator-=(int *observer)">
                        <parameter type="int *" name="observer" default=""/>
                    </function>
                    <function name="operator~" fullname="leaf::pattern::IObservable::operator~" href="leaf-pattern-iobservable.html#operator-7e" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="19" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void operator~()"/>
                    <function name="subscribe" fullname="leaf::pattern::IObservable::subscribe" href="leaf-pattern-iobservable.html#subscribe" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="13" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void subscribe(int *observer)">
                        <parameter type="int *" name="observer" default=""/>
                    </function>
                    <function name="unsubscribe" fullname="leaf::pattern::IObservable::unsubscribe" href="leaf-pattern-iobservable.html#unsubscribe" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="14" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void unsubscribe(int *observer)">
                        <parameter type="int *" name="observer" default=""/>
                    </function>
                    <variable name="m_observers" fullname="leaf::pattern::IObservable::m_observers" href="leaf-pattern-iobservable.html#m_observers-var" status="internal" access="private" location="iobservable.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobservable.h" lineno="22" type="int" static="false"/>
                </class>
                <class name="IObserver" fullname="leaf::pattern::IObserver" href="leaf-pattern-iobserver.html" status="internal" access="private" location="iobserver.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobserver.h" lineno="13">
                    <function name="update" fullname="leaf::pattern::IObserver::update" href="leaf-pattern-iobserver.html#update" status="internal" access="private" location="iobserver.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobserver.h" lineno="17" meta="plain" virtual="pure" const="false" static="false" final="false" override="false" type="void" signature="void update(T... args) = 0">
                        <parameter type="T..." name="args" default=""/>
                    </function>
                    <function name="~IObserver" fullname="leaf::pattern::IObserver::~IObserver" href="leaf-pattern-iobserver.html#dtor.IObserver" status="internal" access="private" location="iobserver.h" filepath="D:/dev/radar/leaf/include/leaf/pattern/iobserver.h" lineno="16" meta="destructor" virtual="virtual" const="false" static="false" final="false" override="false" type="" signature="~IObserver()"/>
                </class>
            </namespace>
            <struct name="source_location" fullname="leaf::source_location" href="leaf-source-location.html" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="36">
                <function name="column" fullname="leaf::source_location::column" href="leaf-source-location.html#column" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="114" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="uint_least32_t" signature="uint_least32_t column() const"/>
                <function name="current" fullname="leaf::source_location::current" href="leaf-source-location.html#current" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="43" meta="plain" virtual="non" const="false" static="true" final="false" override="false" type="int" signature="int current(const char *file, const char *function, uint_least32_t line, uint_least32_t column)">
                    <parameter type="const char *" name="file" default="__builtin_FILE()"/>
                    <parameter type="const char *" name="function" default="__builtin_FUNCTION()"/>
                    <parameter type="uint_least32_t" name="line" default="__builtin_LINE()"/>
                    <parameter type="uint_least32_t" name="column" default="__builtin_COLUMN()"/>
                </function>
                <function name="file_name" fullname="leaf::source_location::file_name" href="leaf-source-location.html#file_name" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="102" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const char *" signature="const char * file_name() const"/>
                <function name="function_name" fullname="leaf::source_location::function_name" href="leaf-source-location.html#function_name" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="105" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="const char *" signature="const char * function_name() const"/>
                <function name="line" fullname="leaf::source_location::line" href="leaf-source-location.html#line" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="111" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="uint_least32_t" signature="uint_least32_t line() const"/>
                <function name="source_location" fullname="leaf::source_location::source_location" href="leaf-source-location.html#source_location" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="78" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="source_location()"/>
                <function name="source_location" fullname="leaf::source_location::source_location" href="leaf-source-location.html#source_location-1" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="92" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="source_location(const char *file, const uint_least32_t line, const char *function, const uint_least32_t column)">
                    <parameter type="const char *" name="file" default=""/>
                    <parameter type="const uint_least32_t" name="line" default=""/>
                    <parameter type="const char *" name="function" default=""/>
                    <parameter type="const uint_least32_t" name="column" default="0"/>
                </function>
                <variable name="UNKNOWN" fullname="leaf::source_location::UNKNOWN" href="leaf-source-location.html#UNKNOWN-var" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="39" type="const char *const" static="true"/>
                <variable name="m_column" fullname="leaf::source_location::m_column" href="leaf-source-location.html#m_column-var" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="72" type="uint_least32_t" static="false"/>
                <variable name="m_file" fullname="leaf::source_location::m_file" href="leaf-source-location.html#m_file-var" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="69" type="const char *" static="false"/>
                <variable name="m_function" fullname="leaf::source_location::m_function" href="leaf-source-location.html#m_function-var" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="70" type="const char *" static="false"/>
                <variable name="m_line" fullname="leaf::source_location::m_line" href="leaf-source-location.html#m_line-var" status="internal" access="private" location="sourcelocation.h" filepath="D:/dev/radar/leaf/include/leaf/global/sourcelocation.h" lineno="71" type="uint_least32_t" static="false"/>
            </struct>
            <namespace name="trait" fullname="leaf::trait" href="leaf-trait-sub-leaf.html" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="12">
                <namespace name="c" fullname="leaf::trait::c" href="leaf-trait-c-sub-leaf.html" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="14"/>
                <namespace name="i" fullname="leaf::trait::i" href="leaf-trait-i-sub-leaf.html" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="47">
                    <struct name="Display" fullname="leaf::trait::i::Display" href="leaf-trait-i-display.html" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="50">
                        <function name="as_str" fullname="leaf::trait::i::Display::as_str" href="leaf-trait-i-display.html#as_str" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="54" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int as_str() const"/>
                        <function name="display" fullname="leaf::trait::i::Display::display" href="leaf-trait-i-display.html#display" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="52" meta="plain" virtual="pure" const="true" static="false" final="false" override="false" type="int" signature="int display() const = 0"/>
                        <function name="to_string" fullname="leaf::trait::i::Display::to_string" href="leaf-trait-i-display.html#to_string" status="internal" access="private" location="traits.h" filepath="D:/dev/radar/leaf/include/leaf/traits.h" lineno="53" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="int" signature="int to_string() const"/>
                    </struct>
                </namespace>
            </namespace>
            <namespace name="types" fullname="leaf::types" href="leaf-types-sub-leaf.html" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="11">
                <alias name="f128" fullname="leaf::types::f128" href="leaf-types-sub-leaf.html#f128-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="25" aliasedtype="long double"/>
                <alias name="f32" fullname="leaf::types::f32" href="leaf-types-sub-leaf.html#f32-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="23" aliasedtype="float"/>
                <alias name="f64" fullname="leaf::types::f64" href="leaf-types-sub-leaf.html#f64-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="24" aliasedtype="double"/>
                <alias name="i16" fullname="leaf::types::i16" href="leaf-types-sub-leaf.html#i16-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="18" aliasedtype="int16_t"/>
                <alias name="i32" fullname="leaf::types::i32" href="leaf-types-sub-leaf.html#i32-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="19" aliasedtype="int32_t"/>
                <alias name="i64" fullname="leaf::types::i64" href="leaf-types-sub-leaf.html#i64-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="20" aliasedtype="int64_t"/>
                <alias name="i8" fullname="leaf::types::i8" href="leaf-types-sub-leaf.html#i8-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="17" aliasedtype="int8_t"/>
                <alias name="isize" fullname="leaf::types::isize" href="leaf-types-sub-leaf.html#isize-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="22" aliasedtype="intptr_t"/>
                <alias name="u16" fullname="leaf::types::u16" href="leaf-types-sub-leaf.html#u16-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="14" aliasedtype="uint16_t"/>
                <alias name="u32" fullname="leaf::types::u32" href="leaf-types-sub-leaf.html#u32-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="15" aliasedtype="uint32_t"/>
                <alias name="u64" fullname="leaf::types::u64" href="leaf-types-sub-leaf.html#u64-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="16" aliasedtype="uint64_t"/>
                <alias name="u8" fullname="leaf::types::u8" href="leaf-types-sub-leaf.html#u8-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="13" aliasedtype="uint8_t"/>
                <alias name="usize" fullname="leaf::types::usize" href="leaf-types-sub-leaf.html#usize-alias" status="internal" access="private" location="types.h" filepath="D:/dev/radar/leaf/include/leaf/global/types.h" lineno="21" aliasedtype="size_t"/>
            </namespace>
            <struct name="unexpect_t" fullname="leaf::unexpect_t" href="leaf-unexpect-t.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="114">
                <function name="unexpect_t" fullname="leaf::unexpect_t::unexpect_t" href="leaf-unexpect-t.html#unexpect_t" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="116" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="unexpect_t()"/>
            </struct>
            <class name="unexpected" fullname="leaf::unexpected" href="leaf-unexpected.html" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="26">
                <function name="unexpected" fullname="leaf::unexpected::unexpected" href="leaf-unexpected.html#unexpected" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="31" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="unexpected()"/>
                <function name="unexpected" fullname="leaf::unexpected::unexpected" href="leaf-unexpected.html#unexpected-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="33" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" type="" signature="unexpected(const E &amp;e)">
                    <parameter type="const E &amp;" name="e" default=""/>
                </function>
                <function name="unexpected" fullname="leaf::unexpected::unexpected" href="leaf-unexpected.html#unexpected-2" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="36" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="2" type="" signature="unexpected(E &amp;&amp;e)">
                    <parameter type="E &amp;&amp;" name="e" default=""/>
                </function>
                <function name="unexpected" fullname="leaf::unexpected::unexpected" href="leaf-unexpected.html#unexpected-3" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="41" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="3" type="" signature="unexpected(Args &amp;&amp;... args)">
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="unexpected" fullname="leaf::unexpected::unexpected" href="leaf-unexpected.html#unexpected-4" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="48" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="4" type="" signature="unexpected(std::initializer_list&lt;U&gt; l, Args &amp;&amp;... args)">
                    <parameter type="std::initializer_list&lt;U&gt;" name="l" default=""/>
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="value" fullname="leaf::unexpected::value" href="leaf-unexpected.html#value" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="51" meta="plain" virtual="non" const="true" static="false" final="false" override="false" refness="1" type="const E &amp;" signature="const E &amp; value() const &amp;"/>
                <function name="value" fullname="leaf::unexpected::value" href="leaf-unexpected.html#value-1" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="52" meta="plain" virtual="non" const="false" static="false" final="false" override="false" overload="true" overload-number="1" refness="1" type="E &amp;" signature="E &amp; value() &amp;"/>
                <variable name="m_val" fullname="leaf::unexpected::m_val" href="leaf-unexpected.html#m_val-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="57" type="E" static="false"/>
            </class>
            <namespace name="utils" fullname="leaf::utils" href="leaf-utils-sub-leaf.html" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="5">
                <function name="make_shared_nothrow" fullname="leaf::utils::make_shared_nothrow" href="leaf-utils-sub-leaf.html#make_shared_nothrow" status="internal" access="private" location="noexcept.h" filepath="D:/dev/radar/leaf/include/leaf/utils/noexcept.h" lineno="18" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="shared_ptr&lt;T&gt;" signature="shared_ptr&lt;T&gt; make_shared_nothrow(Args &amp;&amp;... args)">
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="make_unique_nothrow" fullname="leaf::utils::make_unique_nothrow" href="leaf-utils-sub-leaf.html#make_unique_nothrow" status="internal" access="private" location="noexcept.h" filepath="D:/dev/radar/leaf/include/leaf/utils/noexcept.h" lineno="10" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="unique_ptr&lt;T&gt;" signature="unique_ptr&lt;T&gt; make_unique_nothrow(Args &amp;&amp;... args)">
                    <parameter type="Args &amp;&amp;..." name="args" default=""/>
                </function>
                <function name="to_underlying" fullname="leaf::utils::to_underlying" href="leaf-utils-sub-leaf.html#to_underlying" status="internal" access="private" location="enum.h" filepath="D:/dev/radar/leaf/include/leaf/utils/enum.h" lineno="9" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="int" signature="int to_underlying(int t)">
                    <parameter type="int" name="t" default=""/>
                </function>
                <function name="type_name" fullname="leaf::utils::type_name" href="leaf-utils-sub-leaf.html#type_name" status="internal" access="private" location="rtti.h" filepath="D:/dev/radar/leaf/include/leaf/utils/rtti.h" lineno="14" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="string" signature="string type_name()"/>
                <struct name="ElapsedTimer" fullname="leaf::utils::ElapsedTimer" href="leaf-utils-elapsedtimer.html" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="6">
                    <function name="ElapsedTimer" fullname="leaf::utils::ElapsedTimer::ElapsedTimer" href="leaf-utils-elapsedtimer.html#ElapsedTimer" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="8" meta="constructor" virtual="non" const="false" static="false" final="false" override="false" type="" signature="ElapsedTimer()"/>
                    <function name="elapsed" fullname="leaf::utils::ElapsedTimer::elapsed" href="leaf-utils-elapsedtimer.html#elapsed" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="13" meta="plain" virtual="non" const="true" static="false" final="false" override="false" type="std::chrono::duration&lt;double&gt;" signature="std::chrono::duration&lt;double&gt; elapsed() const"/>
                    <function name="reset" fullname="leaf::utils::ElapsedTimer::reset" href="leaf-utils-elapsedtimer.html#reset" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="17" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void reset()"/>
                    <variable name="start" fullname="leaf::utils::ElapsedTimer::start" href="leaf-utils-elapsedtimer.html#start-var" status="internal" access="private" location="elapsed.h" filepath="D:/dev/radar/leaf/include/leaf/utils/elapsed.h" lineno="20" type="std::chrono::time_point&lt;std::chrono::steady_clock&gt;" static="false"/>
                </struct>
                <namespace name="detail" fullname="leaf::utils::detail" href="leaf-utils-detail-sub-leaf.html" status="internal" access="private" location="rtti.h" filepath="D:/dev/radar/leaf/include/leaf/utils/rtti.h" lineno="10">
                    <function name="demangle" fullname="leaf::utils::detail::demangle" href="leaf-utils-detail-sub-leaf.html#demangle" status="internal" access="private" location="rtti.h" filepath="D:/dev/radar/leaf/include/leaf/utils/rtti.h" lineno="11" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="string" signature="string demangle(const char *name)">
                        <parameter type="const char *" name="name" default=""/>
                    </function>
                </namespace>
                <namespace name="ranges" fullname="leaf::utils::ranges" href="leaf-utils-ranges-sub-leaf.html" status="internal" access="private" location="ranges.h" filepath="D:/dev/radar/leaf/include/leaf/utils/ranges.h" lineno="9">
                    <function name="collect" fullname="leaf::utils::ranges::collect" href="leaf-utils-ranges-sub-leaf.html#collect" status="internal" access="private" location="ranges.h" filepath="D:/dev/radar/leaf/include/leaf/utils/ranges.h" lineno="24" meta="plain" virtual="non" const="false" static="false" final="false" override="false" type="void" signature="void collect()"/>
                    <namespace name="detail" fullname="leaf::utils::ranges::detail" href="leaf-utils-ranges-detail-sub-leaf.html" status="internal" access="private" location="ranges.h" filepath="D:/dev/radar/leaf/include/leaf/utils/ranges.h" lineno="10">
                        <struct name="to_helper" fullname="leaf::utils::ranges::detail::to_helper" href="leaf-utils-ranges-detail-to-helper.html" status="internal" access="private" location="ranges.h" filepath="D:/dev/radar/leaf/include/leaf/utils/ranges.h" lineno="11"/>
                    </namespace>
                </namespace>
            </namespace>
            <variable name="in_place" fullname="leaf::in_place" href="leaf-sub-leaf.html#in_place-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="23" type="const in_place_t" static="false"/>
            <variable name="unexpect" fullname="leaf::unexpect" href="leaf-sub-leaf.html#unexpect-var" status="internal" access="private" location="result.h" filepath="D:/dev/radar/leaf/include/leaf/global/result.h" lineno="119" type="const unexpect_t" static="false"/>
        </namespace>
        <namespace name="std" href="std-sub-leaf.html" status="internal" access="private" location="memory.h" filepath="D:/dev/radar/leaf/include/leaf/memory.h" lineno="218"/>
        <typedef name="_mode_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="74"/>
        <typedef name="_pid_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="63"/>
        <typedef name="_sigset_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="104"/>
        <typedef name="mode_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="77"/>
        <typedef name="pid_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="68"/>
        <typedef name="useconds_t" status="internal" access="private" location="types.h" filepath="C:/msys64/mingw64/include/sys/types.h" lineno="84"/>
    </namespace>
</INDEX>
